name: CI PR Checks

on: pull_request

jobs:
  eslint:
    name: ESLint
    permissions:
      actions: write
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: 'Checkout ${{ inputs.ref }}'
        uses: actions/checkout@v2
        with:
          path: source
          ref: '${{ inputs.ref }}'

      - name: Install Basic app dependencies
        run: |
          yarn install
        working-directory: source/examples/Basic

      - name: Linter Basic
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx
        working-directory: source/examples/Basic

      - name: Install TestNamiTV app dependencies
        run: |
          yarn install
        working-directory: source/examples/TestNamiTV

      - name: Linter TestNamiTV
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx
        working-directory: source/examples/TestNamiTV
  e2e-ios:
    runs-on: macos-12

    steps:
      - uses: actions/setup-node@master

      - name: 'Checkout ${{ inputs.ref }}'
        uses: actions/checkout@v3
        with:
          path: source
          ref: '${{ inputs.ref }}'

      # Get from cache
      - name: Cache node modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      # Check possibility of path
      - name: Cache Pods
        uses: actions/cache@v1
        id: podcache
        with:
          path: source/examples/Basic/ios/Pods
          key: pods-${{ hashFiles('**/Podfile.lock') }}

      - name: Rebuild cache detox
        if: steps.cache.outputs.cache-hit == 'true'
        run: detox clean-framework-cache && detox build-framework-cache
        working-directory: source/examples/Basic

      - name: Install Yarn Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install
        working-directory: source/examples/Basic

      # Installations
      - name: Install macOS dependencies
        run: |
          brew tap wix/brew
          brew install applesimutils
          sudo gem install cocoapods
          gem install CFPropertyList

      - name: Install iOS pods
        run: pod install
        working-directory: source/examples/Basic/ios

      - name: Install Detox CLI
        run: yarn global add detox-cli
        working-directory: source/examples/Basic

      - name: Detox build
        run: detox build --configuration ios.sim.release
        working-directory: source/examples/Basic

      - name: Detox test
        run: |
          yarn start &
          METRO_BUNDLER_PID=$!
          detox test --configuration ios.sim.release --cleanup --headless --record-logs all
          DETOX_EXIT_CODE=$?
          kill $METRO_BUNDLER_PID
          exit $DETOX_EXIT_CODE
        working-directory: source/examples/Basic

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: detox-artifacts
          path: artifacts
  e2e-android:
    ## runs-on: ubuntu-latest
    runs-on: macos-latest
    steps:
      - name: 'Checkout ${{ inputs.ref }}'
        uses: actions/checkout@v3
        with:
          path: source
          ref: '${{ inputs.ref }}'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # - name: Install ADB
      #   run: |
      #    sudo apt-get update
      #    sudo apt-get install -y android-sdk-platform-tools-common

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        working-directory: source/examples/Basic

#      - name: Install AVD files
#      - run: |
#          # Install AVD files
#          yes | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-29;default;x86_64'
#          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
#          # Create emulator
#          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_29_AOSP -d pixel --package 'system-images;android-29;default;x86_64' --force
#          $ANDROID_HOME/emulator/emulator -list-avds
#          emulator_config=~/.android/avd/Pixel_API_29_AOSP.avd/config.ini
#          # The following madness is to support empty OR populated config.ini files,
#          # the state of which is dependant on the version of the emulator used (which we don't control),
#          # so let's be defensive to be safe.
#          # Replace existing config (NOTE we're on MacOS so sed works differently!)
#          sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
#          sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
#          sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
#          # Or, add new config
#          if ! grep -q "hw.lcd.density" "$emulator_config"; then
#            echo "hw.lcd.density=420" >> "$emulator_config"
#          fi
#          if ! grep -q "hw.lcd.height" "$emulator_config"; then
#            echo "hw.lcd.height=1920" >> "$emulator_config"
#          fi
#          if ! grep -q "hw.lcd.width" "$emulator_config"; then
#            echo "hw.lcd.width=1080" >> "$emulator_config"
#          fi
#          echo "Emulator settings ($emulator_config)"
#          cat "$emulator_config"

#      - name: Start Android emulator
#      - run: |
#          echo "Starting emulator and waiting for boot to complete..."
#          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_API_29_AOSP -no-snapshot -no-window -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 > /dev/null 2>&1 &
#          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
#          echo "Emulator has finished booting"
#          $ANDROID_HOME/platform-tools/adb devices

      - name: Android Emulator
        timeout-minutes: 10
        continue-on-error: true
        run: |
          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd emu -no-audio -no-snapshot -no-window &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          $ANDROID_HOME/platform-tools/adb devices
          echo "Emulator started"

      - name: Install Detox CLI
        run: yarn global add detox-cli

      - name: Detox build
        run: |
          rm -rf node_modules/react-native-nami-sdk/examples
          detox build --configuration android.emu.release
        working-directory: source/examples/Basic

      - name: Run Detox Test(s)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: pixel
          avd-name: Pixel_API_29_AOSP
          script: |
            cd examples/Basic
            yarn start &
            METRO_BUNDLER_PID=$!
            detox test --configuration android.emu.release --headless --record-logs all
            DETOX_EXIT_CODE=$?
            kill $METRO_BUNDLER_PID
            exit $DETOX_EXIT_CODE

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: detox-artifacts
          path: artifacts
